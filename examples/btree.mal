(* Binary tree library *)

require "prelude";

type ('a,'b) info = { key: 'a, data: 'b }

and ('a,'b) btree =
    Empty
  | Node of ('a,'b) btree * ('a,'b) info * int *  ('a,'b) btree

fun max m n = if m > n then m else n

fun depth t =
  case t of
    Empty => 0
  | Node (_,_,d,_) => d
  end

fun find key t =
  case t of
    Empty => None
  | Node (l,info,_,r) =>
      if info.key = key then Some info.data
      else if info.key < key then find key r
	   else find key l
  end

fun bal t1 info t2 =
  begin
    val d1 = depth t1;
    val d2 = depth t2;
    if d1 <= d2 + 1 & d1 + 1 >= d2 then
      Node (t1, info, max d1 d2 + 1, t2)
    else
      if d1 > d2 + 1 then begin
	val Node (t11, info1, _, t12) = t1;
	if depth t12 < depth t11 then
	  Node (t11, info1, d1, Node (t12, info, d1 - 1, t2))
	else begin
	  val Node (t121, info12, d12, t122) = t12;
	  val d1' = 1 + max (depth t11) (depth t121);
	  val d2' = 1 + max (depth t122) (depth t2);
	  Node (Node (t11, info1, d1', t121),
		info12, 1 + max d1' d2',
		Node (t122, info, d2', t2))
	end
      end else begin
	val Node (t21, info2, _, t22) = t2;
	if depth t22 < depth t21 then
	  Node (Node (t1, info, d2 - 1, t21), info2, d2, t22)
	else begin
	  val Node (t211, info21, d21, t212) = t21;
	  val d1' = 1 + max (depth t1) (depth t211)
	  and d2' = 1 + max (depth t212) (depth t22);
	  Node (Node (t1, info, d1', t211),
	        info21, 1 + max d1' d2',
		Node (t212, info2, d2', t22))
	end
      end
  end

fun add key data t =
  case t of
    Empty => Node (Empty, {key=key, data=data}, 1, Empty)
  | Node (t1, info, d, t2) =>
      if info.key = key then
	Node (t1, {key=key, data=data}, d, t2)
      else
	if info.key < key then begin
	  val t2' = add key data t2;
	  bal t1 info t2'
	end else begin
	  val t1' = add key data t1;
	  bal t1' info t2
	end
  end

val empty = Empty

(*
var t = empty;
t <- add 7 "Naoki" t;
t <- add 3 "Reiko" t;
t <- add 2 "Atsuko" t;
t <- add 5 "Susumu" t;
t <- add 11 "Gariko" t;
t <- add 9 "Yasuko" t;
t <- add 14 "Makoto" t;
val t = t;
*)