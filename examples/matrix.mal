(* Basic matrix operations *)

require "prelude";

type 'a matrix == 'a list list

fun map_matrix f (m : 'a matrix) : 'b matrix = map_list (map_list f) m

fun inner mult add l1 l2 =
  case (l1,l2) of
    ([a],[b]) => mult a b
  | (a::la,b::lb) => add (mult a b) (inner mult add la lb)
  | _ => raise "Matrix.inner"
  end

fun transp (m : 'a matrix) : 'a matrix =
  case m of
    (a::l)::r =>
      val (r,rr) =
        fold_right
          (fn (a::l) (r,rr) => (a::r,l::rr))
          m ([],[]);
      r :: transp rr
  | []::_ => []
  | _ => raise "Matrix.transp"
  end

fun prod_matrix mult add (m1 : 'a matrix) m2 : 'b matrix =
  begin
    val m2 = transp m2;
    map_list (fn l => map_list (fn r => inner mult add l r) m2) m1
  end

fun left_prod mult c m = map_matrix (mult c) m
fun right_prod mult m c = map_matrix (fn a => mult a c) m
fun tensor mult m1 m2 = right_prod (left_prod mult) m1 m2

fun flatten_tensor (m : 'a matrix matrix) : 'a matrix =
  begin
    val m' =
      map_list
	(fn l =>
	  fold_right (map_list2 (@)) l (map_list (fn _ => []) l))
	m;
    flatten m'
  end
