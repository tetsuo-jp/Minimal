(* $Id: turtle.mal,v 1.6 2004/09/24 06:01:27 garrigue Exp $ *)

require "prelude";

type turtle =
    { mutable angle: int,
      mutable x: float,
      mutable y: float,
      mutable crayon: bool,
      mutable shown: bool,
      mutable color: color }

val turtle =
  { angle = 90, x = 0., y = 0.,
    crayon = true, shown = false, color = black }

val turtle_dots =
  [ (0,0), (-1,0), (-2,0), (-3,0), (-4,0), (1,0), (2,0), (3,0), (4,0),
    (3,1), (2,1), (1,1), (0,1), (-1,1), (-2,1), (-3,1),
    (3,2), (2,2), (-2,2), (-3,2),
    (2,3), (1,3), (-1,3), (-2,3), (1,4), (0,4), (-1,4),
    (1,5), (0,5), (-1,5), (0,6) ]

val pi = acos (-1.)

fun rad an = pi * float an / 180.

val set_color_raw = set_color
fun set_color c =
  begin
    set_color_raw c;
    turtle.color <- c
  end

fun flip_turtle () =
  begin
    val a = rad turtle.angle
    val color = turtle.color;
    val x0 = round turtle.x and y0 = round turtle.y;
    fun p (x, y) =
      (x0 + round (float x * sin a + float y * cos a),
       y0 + round (float y * sin a - float x * cos a))
    fun uniq l =
      fold_left (fn l p => if mem p l then l else p :: l) [] l;
    val dots = uniq (map_list p turtle_dots);
    fun flip (x,y) =
      begin
        set_color (point_color x y lxor 0xffffff);
        plot x y
      end;
    do_list flip dots;
    set_color color;
    turtle.shown <- not turtle.shown;
  end

fun left an =
  begin
    val shown = turtle.shown;
    if shown then flip_turtle ();
    turtle.angle <- (turtle.angle + an) mod 360;
    if shown then flip_turtle ();
  end
fun right an = left (-an)

fun forward n =
  begin
    val shown = turtle.shown;
    if shown then flip_turtle ();
    val x' = turtle.x + float n * cos (rad turtle.angle); 
    val y' = turtle.y + float n * sin (rad turtle.angle);
    if turtle.crayon then begin
      moveto (round turtle.x) (round turtle.y);
      lineto (round x') (round y');
    end;
    turtle.x <- x'; turtle.y <- y';
    if shown then flip_turtle ();
  end

fun set_turtle b =
  if (if turtle.shown then not b else b) then flip_turtle ()
fun set_crayon b = turtle.crayon <- b
fun set_position x y =
  begin
    val shown = turtle.shown;
    if shown then flip_turtle ();
    turtle.x <- float x; turtle.y <- float y;
    if shown then flip_turtle ();
  end
fun get_position () = (turtle.x, turtle.y)
fun get_angle () = turtle.angle

fun start_turtle () =
  begin
    open_graph ();
    turtle.x <- float (size_x()/2);
    turtle.y <- float (size_y()/2);
    set_turtle true;
  end

hide turtle

(* Example of use:

start_turtle ();
fun square l = for i = 1 to 4 do begin forward l; left 90 end;
square 100;
fun circle l = for i = 1 to 90 do begin forward l; left 4 end;
left 180;
circle 10;
*)