(* graphics *)

fun draw_function f x0 x1 y0 y1 = begin
  val size_x = size_x () and size_y = size_y ();
  val scale_x = float size_x / (x1 -. x0);
  val scale_y = float size_y / (y1 -. y0);
  fun y_coord y = begin
    val y' = trunc ((y - y0) * scale_y);
    if y' > size_y then size_y else
    if y' < 0 then -1 else y'
  end;
  moveto 0 (y_coord (f x0));
  for i = 1 to size_x - 1 do
    lineto i (y_coord (f (float i / scale_x + x0)));
end;

fun draw_line x0 y0 x1 y1 = begin
  moveto x0 y0;
  lineto x1 y1
end;

fun floor x =
  if x >= 0. then float (trunc x) else float (trunc (x - 1.));

fun log10 x = log x / log 10.;

fun draw_axis x0 x1 y0 y1 = begin
  val size_x = size_x () and size_y = size_y ();
  val scale_x = float size_x / (x1 -. x0)
  and scale_y = float size_y / (y1 -. y0);
  fun x_coord x = trunc ((x - x0) * scale_x);
  fun y_coord y = trunc ((y - y0) * scale_y);
  val x_base = if x0 < 0. & x1 > 0. then x_coord 0. else 0
  and y_base = if y0 < 0. & y1 > 0. then y_coord 0. else 0;
  draw_line x_base 0 x_base size_y;
  draw_line 0 y_base size_x y_base;
  val x_unit = 10. ** floor (log10 ((x1 -. x0)/4.))
  and y_unit = 10. ** floor (log10 ((y1 -. y0)/4.));
  var x = floor (x0 / x_unit + 1.) * x_unit
  and y = floor (y0 / y_unit + 1.) * x_unit;
  while x_coord x < size_x do begin
    draw_line (x_coord x) y_base (x_coord x) (y_base + 5);
    x <- x + x_unit
  end;
  while y_coord y < size_y do begin
    draw_line x_base (y_coord y) (x_base + 5) (y_coord y);
    y <- y + y_unit
  end;
end;

val pi = acos (-1.);

fun draw_circle x y r = begin
  moveto (x+r) y;
  for i = 1 to r do
    lineto (x + trunc (float r * cos (2. * pi * float i / float r)))
           (y + trunc (float r * sin (2. * pi * float i / float r)))
end;

fun read_graph () = begin
  var c = read_key () and s = [||];
  while c <> '\r' do begin
    val c' = [|c|];
    s <- s ^ c'; draw_string c'; c <- read_key ();
  end;
  s
end;

