(* $Id: prelude.mal,v 1.5 2004/09/24 03:41:29 garrigue Exp $ *)

(******************** Prelude for Minimal *********************)
(* Basic definitions used by many other modules		      *)

(* Useful types *)

type 'a option = None | Some of 'a
      (* Used when there may be no answer *)

(* Definitions:
    Pairs
   val fst : 'a * 'b -> 'a
   val snd : 'a * 'b -> 'b
    Lists
   val hd : 'a list -> 'a
   val tl : 'a list -> 'a list
   val nth : int -> 'a list -> 'a
   val length_list : 'a list -> int
   val rev_list : 'a list -> 'a list
   val flatten : 'a list list -> 'a list
   val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
   val fold_right : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
   val fold_fail : ('a -> 'b -> 'a option) -> 'a -> 'b list -> 'a option
   val find_list : ('a -> 'b option) -> 'a list -> 'b option
   val do_list2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> unit
   val map_list2 : ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
   val filter : ('a -> bool) -> 'a list -> 'a list
   val exists : ('a -> bool) -> 'a list -> bool
   val for_all : ('a -> bool) -> 'a list -> bool
   val mem : 'a -> 'a list -> bool
   val memq : 'a -> 'a list -> bool
   val combine : 'a list -> 'b list -> ('a * 'b) list
   val separate : ('a * 'b) list -> 'a list * 'b list
    Association lists
   val assoc : 'a -> ('a * 'b) list -> 'b option
   val assq : 'a -> ('a * 'b) list -> 'b option
    Arrays
   val init : int -> (int -> 'a) -> 'a array
   val index_from : 'a array -> 'a -> int -> int
   val index : 'a array -> 'a -> int
   val split : 'a array -> 'a -> 'a array list
*)

(* Pairs *)

fun fst (x,y) = x
fun snd (x,y) = y

(* Lists *)

fun hd (a::l) = a
fun tl (a::l) = l

fun nth n l =
  begin
    val a::l = l;
    if n = 0 then a else nth (n-1) l
  end

fun length_list l =
  case l of
    [] => 0
  | a::l => 1 + length_list l
  end

fun rev_list l =
  begin
    fun rev l t =
      case l of
	[] => t
      | a::l => rev l (a::t)
      end;
    rev l []
  end

fun flatten l =
  case l of
    [] => []
  | a::l => a @ flatten l
  end

(* Maps and iterators *)

(* Builtins:
   val do_list : ('a -> 'b) -> 'a list -> unit
   val map_list : ('a -> 'b) -> 'a list -> 'b list
 *)

fun fold_left f acc l =
  case l of
    []   => acc
  | a::l => fold_left f (f acc a) l
  end

fun fold_right f l last =
  case l of
    []   => last
  | a::l => f a (fold_right f l last)
  end

fun fold_fail f acc l =
  case l of
    []   => Some acc
  | a::l =>
      case f acc a of
	None => None
      | Some acc => fold_fail f acc l
      end
  end

fun find_list f l =
  case l of
    []   => None
  | a::l =>
      val r = f a;
      if r <> None then r else find_list f l
  end

fun do_list2 f l1 l2 =
  case (l1,l2) of
    ([],[]) => ()
  | (a1::l1,a2::l2) => f a1 a2; do_list2 f l1 l2
  end

fun map_list2 f l1 l2 =
  case (l1,l2) of
    ([],[]) => []
  | (a1::l1,a2::l2) => f a1 a2 :: map_list2 f l1 l2
  end

fun filter f l =
  case l of
    [] => []
  | a :: l =>
      val l = filter f l;
      if f a then a :: l else l
  end

(* Predicates *)

fun exists p l =
  case l of
    [] => false
  | a::l => p a or exists p l
  end

fun for_all p l =
  case l of
    [] => true
  | a::l => p a & for_all p l
  end

fun mem x l =
  case l of [] => false | y::l => x = y or mem x l end

fun memq x l =
  case l of [] => false | y::l => x == y or mem x l end

(* Lists of pairs *)

fun combine l1 l2 =
  case (l1,l2) of
    ([],[]) => []
  | (a::l1,b::l2) => (a,b) :: combine l1 l2
  end

fun separate l =
  case l of [] => ([],[])
  | (a,b)::l =>
      val (l1,l2) = separate l;
      (a::l1, b::l2)
  end

(* Association lists *)

fun assoc x l =
  case l of
    []       => None
  | (y,v)::l => if x = y then Some v else assoc x l
  end

fun assq x l =
  case l of
    []       => None
  | (y,v)::l => if x == y then Some v else assoc x l
  end

(* Array functions *)

fun init len f =
  begin
    val a = array len (f 0);
    for i = 1 to len-1 do a.[i] <- f i;
    a
  end

fun index_from s c p =
  if p >= length s then -1 else
  if s.[p] = c then p else
  index_from s c (p+1)

fun index s c = index_from s c 0

fun split s c =
  begin
    fun split_after p =
      begin
        val p' = index_from s c p;
        if p' < 0 then [sub s p (length s - p)] else
        sub s p (p' - p) :: split_after (p'+1)
      end;
    split_after 0;
  end
