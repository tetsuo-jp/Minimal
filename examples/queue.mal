(* Abstract queue module *)

type 'a cell = {data: 'a, mutable push: 'a cell option}
type 'a queue = {mutable first: 'a cell option, mutable last: 'a cell option}

fun new_queue () = {first = None, last = None}

fun put_queue a q =
  case q.first of
    None =>
      val c = Some {data = a, push = None};
      q.first <- c; q.last <- c
  | _ =>
      val c = Some {data = a, push = None};
      val Some c' = q.last;
      c'.push <- c;
      q.last <- c
  end

fun get_queue q =
  case q.first of
    None => raise "Empty queue"
  | Some c =>
      q.first <- c.push;
      c.data
  end

fun empty_queue q = (q.first = None)

fun clear_queue q = q.first <- None

fun do_queue f q =
  begin
    fun doit c =
      case c of
	None => ()
      | Some {data = a, push = c} =>
	  f a; doit c
      end;
    doit q.first
  end

fun length_queue q =
  begin
    fun length c =
      case c of None => 0 | Some {push=c} => 1 + length c end;
    length q.first
  end

hide queue
hide cell