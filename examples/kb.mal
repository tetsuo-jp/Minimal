(* Taken from Caml-light's KB, written by Gerard Huet *)

require "prelude";

(**************** A few general-purpose functions *******************)

fun fold f a1 l =
  case l of
    [] => (a1,[])
  | b1::bl =>
      val (a2,c2) = f a1 b1
      val (a,cl) = fold f a2 bl;
      (a, c2::cl)
  end

type 'a result = Ok of 'a | Failure of string
      (* Used in place of exception handling *)

fun try_find f l =
  case l of
    []  => Failure "try_find"
  | a::l =>
      case f a of
	Ok r => Ok r
      | Failure _ => try_find f l
      end
  end

fun partition p l =
  case l of
    [] => ([],[])
  | a::l =>
      val (pos,neg) = partition p l;
      if p a then (a::pos, neg) else (pos, a::neg)
  end

fun message s = begin print_string s; newline() end

(* Added for Minimal *)

fun union l1 l2 =
  case l1 of
    [] => l2
  | x::l1 =>
      if mem x l2 then union l1 l2 else x :: union l1 l2
  end

fun fold_fail2 f acc l1 l2 =
  case (l1,l2) of
    ([],[]) => Ok acc
  | (a1::l1,a2::l2) =>
      case f acc a1 a2 of
	Ok acc => fold_fail2 f acc l1 l2
      | err => err
      end
  end

(****************** Term manipulations *****************)

type term =
    Var of int
  | Term of string * term list

fun vars t =
  case t of
    Var n => [n]
  | Term(_,l) => vars_of_list l
  end
and vars_of_list l =
  case l of
    [] => []
  | t::r => union (vars t) (vars_of_list r)
  end

fun substitute subst t =
  case t of
    Term(oper,sons) => Term(oper, map_list (substitute subst) sons)
  | Var(n) => case assoc n subst of Some t => t | None => t end
  end

fun change f l n =
  case l of
    h::t => if n=1 then f h :: t else h :: change f t (n-1)
  | _ => raise "change"
  end

(* Term replacement replace m u n => m[u<-n] *)
fun replace m u n =
  case (m,u) of
    (_, []) => n
  | (Term(oper,sons), i::u) =>
      Term(oper, change (fn p => replace p u n) sons i)
  | _ => raise "replace"
  end

(* matching = - : (term -> term -> subst) *)
fun matching term1 term2 =
  begin
    fun match_rec subst t1 t2 =
      case (t1,t2) of
        (Var v, m) =>
	  case assoc v subst of
	    Some n =>
	      if m = n then Ok subst else Failure "matching"
	  | None =>
	      Ok ((v,m) :: subst)
	  end
      | (Term(op1,sons1), Term(op2,sons2)) =>
	  if op1 = op2 then fold_fail2 match_rec subst sons1 sons2
		       else Failure "matching"
      | _ => Failure "matching"
      end;
    match_rec [] term1 term2
  end

(* A naive unification algorithm *)

fun compsubst subst1 subst2 = 
  (map_list (fn (v,t) => (v, substitute subst1 t)) subst2) @ subst1

fun occurs n t =
  case t of
    Var m => m=n
  | Term(_,sons) => exists (occurs n) sons
  end

fun unify term1 term2 =
  case (term1, term2) of
    (Var n1, _) =>
      if term1 = term2 then Ok []
      else if occurs n1 term2 then Failure "unify1"
      else Ok [(n1,term2)]
  | (_, Var n2) =>
      if occurs n2 term1 then Failure "unify2"
      else Ok [(n2,term1)]
  | (Term(op1,sons1), Term(op2,sons2)) =>
      if op1 = op2 then 
	fold_fail2
	  (fn s t1 t2 =>
	    case unify (substitute s t1) (substitute s t2) of
	      Ok s1 => Ok (compsubst s1 s)
	    | err => err
	    end)
	  [] sons1 sons2
      else Failure "unify3"
  end

(* We need to print terms with variables independently from input terms
  obtained by parsing. We give arbitrary names v1,v2,... to their variables. *)

val INFIXES = ["+","*","-","/","~"]

fun pretty_term t =
  case t of
    Var n =>
      (* print_string "v"; print_int n *)
      print_string [|char (code 'a' + n - 1)|]
  | Term ("~", [son]) =>
      print_string "-"; pretty_close son
  | Term (oper,sons) =>
      if mem oper INFIXES then
        case sons of
	  [s1,s2] =>
	    pretty_close s1; print_string oper; pretty_close s2
	| _ =>
	    raise "pretty_term : infix arity <> 2"
	end
      else begin
	print_string oper;
        case sons of
	  [] => ()
	| t::lt =>
	    print_string "(";
	    pretty_term t;
	    do_list (fn t => begin print_string ","; pretty_term t end) lt;
	    print_string ")"
	end
      end
  end
and pretty_close m =
  case m of
    Term(oper, _) =>
      if mem oper INFIXES then begin
        print_string "("; pretty_term m; print_string ")"
      end else pretty_term m
  | _ => pretty_term m
  end

(****************** Equation manipulations *************)

type rule == int * (int * (term * term))

(* standardizes an equation so its variables are 1,2,... *)

fun mk_rule m n =
  begin
    val all_vars = union (vars m) (vars n)
    val (k,subst) =
      fold_left
	(fn (i,sigma) v => (i+1,(v,Var(i))::sigma))
	(1,[]) all_vars;
    (k-1, (substitute subst m, substitute subst n))
  end

(* checks that rules are numbered in sequence and returns their number *)
val check_rules : rule list -> int =
  fold_left
    (fn n (k,_) =>
      if k=n+1 then k
	       else raise "Rule numbers not in sequence")
    0

fun pretty_rule ((k,(_,(m,n))) : rule) =
  begin
    print_int k;
    print_string " : ";
    pretty_term m;
    print_string " = ";
    pretty_term n;
    newline()
  end

val pretty_rules = do_list pretty_rule

(****************** Rewriting **************************)

(* Top-level rewriting. Let eq:l=r be an equation, m be a term such that l<=m.
   With sigma = matching l m, we define the image of m by eq as sigma(r) *)
fun reduce l m r =
  case matching l m of
    Ok s => Ok (substitute s r)
  | Failure e => Failure e
  end

(* A more efficient version of can (rewrite1 (l,r)) for r arbitrary *)
fun reducible l m =
  case matching l m of
    Ok _ => true
  | Failure _ =>
      case m of
	Term(_,sons) => exists (reducible l) sons
      |  _  => false
      end
  end

(* mreduce : rules -> term -> term *)
fun mreduce rules m =
  begin
    fun redex (_,(_,(l,r))) = reduce l m r;
    try_find redex rules
  end

(* One step of rewriting in leftmost-outermost strategy, with multiple rules *)
(* fails if no redex is found *)
(* mrewrite1 : rules -> term -> term *)
fun mrewrite1 rules m =
  case mreduce rules m of
    Ok r => Ok r
  | Failure _ =>
      fun tryrec l =
	case l of
	  [] => Failure "mrewrite1"
	| son::rest =>
            case mrewrite1 rules son of
	      Ok r => Ok (r :: rest)
            | Failure _ =>
		case tryrec rest of
		  Ok l => Ok (son :: l)
		| err => err
		end
	    end
	end;
      case m of
	Term(f, sons) => 
	  case tryrec sons of
	    Ok sons => Ok (Term(f, sons))
	  | Failure e => Failure e
	  end
      | _ => Failure "mrewrite1"
      end
  end

(* Iterating rewrite1. Returns a normal form. May loop forever *)
(* mrewrite_all : rules -> term -> term *)
fun mrewrite_all rules m =
  case mrewrite1 rules m of
    Ok r => mrewrite_all rules r
  | Failure _ => m
  end

(*
pretty_term (mrewrite_all Group_rules m where m,_=<<A*(I(B)*B)>>);;
==> A*U
*)


(*********************** Recursive Path Ordering ****************************)

type ordering = Greater | Equal | NotGE

fun ge_ord order pair = order pair <> NotGE
and gt_ord order pair = order pair = Greater
and eq_ord order pair = order pair = Equal

fun rem_eq equiv x l =
  case l of
     []  => None
  | y::l =>
      if equiv (x,y) then Some l else
      case rem_eq equiv x l of
	Some l => Some (y :: l)
      | None => None
      end
  end

fun diff_eq equiv l1 l2 =
  begin
    fun diffrec l1 l2 =
      case l1 of
	[]     => (l1,l2)
      | h1::t1 =>
	  case rem_eq equiv h1 l2 of
	    Some l2 =>
	      diffrec t1 l2
	  | None =>
	      val (t1,l2) = diffrec t1 l2;
	      (h1::t1,l2)
	  end
      end;
    if length_list l1 > length_list l2 then begin
      val (l2,l1) = diffrec l2 l1;
      (l1,l2)
    end else diffrec l1 l2
  end

(* multiset extension of order *)
fun mult_ext order p =
  case p of
    (Term(_,sons1), Term(_,sons2)) =>
      case diff_eq (eq_ord order) sons1 sons2 of
	([],[]) => Equal
      | (l1,l2) =>
	  if for_all (fn n => exists (fn m => order(m,n)=Greater) l1) l2
	  then Greater else NotGE
      end
  | _ => raise "mult_ext"
  end

(* lexicographic extension of order *)
fun lex_ext order (m,n) =
  case (m,n) of
    (Term(_,sons1), Term(_,sons2)) =>
      fun lexrec p =
	case p of
	  ([] , []) => Equal
	| ([] , _ ) => NotGE
	| ( _ , []) => Greater
	| (x1::l1, x2::l2) =>
	    case order (x1,x2) of
	      Greater => if for_all (fn n' => gt_ord order (m,n')) l2 
			 then Greater else NotGE
	    | Equal => lexrec (l1,l2)
	    | NotGE => if exists (fn m' => ge_ord order (m',n)) l1 
		       then Greater else NotGE
	    end
	end;
    lexrec (sons1, sons2)
  | _ => raise "lex_ext"
  end

(* recursive path ordering *)
fun rpo op_order ext (m,n) =
  if m=n then Equal else
  case m of
    Var m => NotGE
  | Term(op1,sons1) =>
      val rporec = rpo op_order ext;
      case n of
	Var n =>
	  if occurs n m then Greater else NotGE
      | Term(op2,sons2) =>
	  case op_order op1 op2 of
	    Greater =>
	      if for_all (fn n' => gt_ord rporec (m,n')) sons2
	      then Greater else NotGE
	  | Equal =>
	      ext rporec (m,n)
	  | NotGE =>
	      if exists (fn m' => ge_ord rporec (m',n)) sons1
	      then Greater else NotGE
	  end
      end
  end

(****************** Critical pairs *********************)

(* All (u,sig) such that n/u (&var) unifies with m,
   with principal unifier sig *)
(* super : term -> term -> (num list & subst) list *)
fun super m n =
  case n of
    Term(_,sons) =>
      fun collate (pairs,n) son =
	(pairs @ map_list (fn (u,sig) => (n::u,sig)) (super m son), n+1)
      val insides = fst (fold_left collate ([],1) sons);
      case unify m n of
	Ok s => ([], s) :: insides
      | Failure _ => insides
      end
  | _ => []
  end

(* Ex :
let (m,_) = <<F(A,B)>> 
and (n,_) = <<H(F(A,x),F(x,y))>> in super m n;;
==> [[1],[2,Term ("B",[])];                      x <- B
     [2],[2,Term ("A",[]); 1,Term ("B",[])]]     x <- A  y <- B
*)

(* All (u,sig), u&[], such that n/u unifies with m *)
(* super_strict : term -> term -> (num list & subst) list *)
fun super_strict m n =
  case n of
    Term(_,sons) =>
      fun collate (pairs,n) son =
	(pairs @ map_list (fn (u,sig) => (n::u,sig)) (super m son), n+1);
      fst (fold_left collate ([],1) sons)
  | _ => []
  end

(* Critical pairs of l1=r1 with l2=r2 *)
(* critical_pairs : term_pair -> term_pair -> term_pair list *)
fun critical_pairs (l1,r1) (l2,r2) =
  begin
    fun mk_pair (u,sig) =
      (substitute sig (replace l2 u r1), substitute sig r2);
    map_list mk_pair (super l1 l2)
  end

(* Strict critical pairs of l1=r1 with l2=r2 *)
(* strict_critical_pairs : term_pair -> term_pair -> term_pair list *)
fun strict_critical_pairs (l1,r1) (l2,r2) =
  begin
    fun mk_pair (u,sig) =
      (substitute sig (replace l2 u r1), substitute sig r2);
    map_list mk_pair (super_strict l1 l2)
  end

(* All critical pairs of eq1 with eq2 *)
fun mutual_critical_pairs eq1 eq2 =
  (strict_critical_pairs eq1 eq2) @ (critical_pairs eq2 eq1)

(* Renaming of variables *)

fun rename n (t1,t2) =
  begin
    fun ren_rec t =
      case t of
	Var k => Var(k+n)
      | Term(op,sons) => Term(op, map_list ren_rec sons)
      end;
    (ren_rec t1, ren_rec t2)
  end

(************************ Completion ******************************)

fun deletion_message (k,_) =
  begin
    print_string "Rule ";
    print_int k;
    message " deleted"
  end

(* Generate failure message *)
fun non_orientable (m,n) =
  begin
    pretty_term m;
    print_string " = ";
    pretty_term n;
    newline()
  end

(* Improved Knuth-Bendix completion procedure *)

fun kb_completion greater rnum rules =
  begin
    val normal_form = mrewrite_all rules
    fun get_rule k = assoc k rules
    fun process failures =
      begin
	fun processf (k,l) eqs =
	  case eqs of
	    [] =>
	      if k<l then next_criticals (k+1,l) else
	      if l<rnum then next_criticals (1,l+1) else
	      case failures of
		[] => rules (* successful completion *)
	      | _  =>
		  message "Non-orientable equations :";
		  do_list non_orientable failures;
		  raise "kb_completion"
	      end
	  | (m,n)::eqs =>
	      val m' = normal_form m
	      and n' = normal_form n
	      fun enter_rule(left,right) =
		begin
		  val new_rule = (rnum+1, mk_rule left right);
		  pretty_rule new_rule;
		  fun left_reducible (_,(_,(l,_))) = reducible left l
		  val (redl,irredl) = partition left_reducible rules;
		  do_list deletion_message redl;
		  fun right_reduce (m,(_,(l,r))) = 
		    (m,mk_rule l (mrewrite_all (new_rule::rules) r))
		  val irreds = map_list right_reduce irredl
		  and eqs' = map_list (fn (_,(_,pair)) => pair) redl;
		  kb_completion greater (rnum+1) (new_rule::irreds)
		    [] (k,l) (eqs @ eqs' @ failures)
		end;
	      if m'=n' then processf (k,l) eqs else
	      if greater(m',n') then enter_rule(m',n') else
	      if greater(n',m') then enter_rule(n',m') else
	      process ((m',n')::failures) (k,l) eqs
	  end
	and next_criticals (k,l) =
	  case get_rule l of
	    Some (v,el) =>
	      if k=l then
		processf (k,l) (strict_critical_pairs el (rename v el))
	      else
		case get_rule k of
		  Some (_,ek) =>
		    processf (k,l) (mutual_critical_pairs el (rename v ek))
		| None (*rule k deleted*) => next_criticals (k+1,l)
		end
	  | None (*rule l deleted*) => next_criticals (1,l+1)
	  end;
	processf
      end;
    process
  end

(* complete_rules is assumed locally confluent, and checked Noetherian with
  ordering greater, rules is any list of rules *)

fun kb_complete greater complete_rules rules =
  begin
    val n = check_rules complete_rules
    and eqs = map_list (fn (_,(_,pair)) => pair) rules
    val completed_rules =
      kb_completion greater n complete_rules [] (n,n) eqs;
    message "Canonical set found :";
    pretty_rules (rev_list completed_rules);
    ()
  end

(************ Examples ****************)

(* The axioms for groups *)

(*
val group_rules =
  [ (1, (1, (Term("*", [Term("U",[]), Var 1]), Var 1))),
    (2, (1, (Term("*", [Term("I",[Var 1]), Var 1]), Term("U",[])))),
    (3, (3, (Term("*", [Term("*", [Var 1, Var 2]), Var 3]),
             Term("*", [Var 1, Term("*", [Var 2, Var 3])])))) ]

fun group_precedence op1 op2 =
  if op1 = op2 then Equal else 
  if (op1 = "I") or (op2 = "U") then Greater else NotGE
*)

val group_rules =
  [ (1, (1, (Term("+", [Term("0",[]), Var 1]), Var 1))),
    (2, (1, (Term("+", [Term("~",[Var 1]), Var 1]), Term("0",[])))),
    (3, (3, (Term("+", [Term("+", [Var 1, Var 2]), Var 3]),
             Term("+", [Var 1, Term("+", [Var 2, Var 3])])))) ]

fun group_precedence op1 op2 =
  if op1 = op2 then Equal else
  if (op1 = "~") or (op2 = "0") then Greater else NotGE

val group_order = rpo group_precedence lex_ext 

(* Another example *)

val geom_rules = [
 (1,(1,(Term ("*",[(Term ("U",[])), (Var 1)]),(Var 1)))),
 (2,(1,(Term ("*",[(Term ("I",[(Var 1)])), (Var 1)]),(Term ("U",[]))))),
 (3,(3,(Term ("*",[(Term ("*",[(Var 1), (Var 2)])), (Var 3)]),
  (Term ("*",[(Var 1), (Term ("*",[(Var 2), (Var 3)]))]))))),
 (4,(0,(Term ("*",[(Term ("A",[])), (Term ("B",[]))]),
  (Term ("*",[(Term ("B",[])), (Term ("A",[]))]))))),
 (5,(0,(Term ("*",[(Term ("C",[])), (Term ("C",[]))]),(Term ("U",[]))))),
 (6,(0,
  (Term
   ("*",
    [(Term ("C",[])),
     (Term ("*",[(Term ("A",[])), (Term ("I",[(Term ("C",[]))]))]))]),
  (Term ("I",[(Term ("A",[]))]))))),
 (7,(0,
  (Term
   ("*",
    [(Term ("C",[])),
     (Term ("*",[(Term ("B",[])), (Term ("I",[(Term ("C",[]))]))]))]),
  (Term ("B",[])))))
]

fun geom_rank e =
  case e of
    "U" => 0
  | "*" => 1
  | "I" => 2
  | "B" => 3
  | "C" => 4
  | "A" => 5
  end

fun geom_precedence op1 op2 =
  begin
    val r1 = geom_rank op1
    and r2 = geom_rank op2;
    if r1 = r2 then Equal else
    if r1 > r2 then Greater else NotGE
  end

val geom_order = rpo geom_precedence lex_ext;

kb_complete (gt_ord group_order) [] group_rules;

(* If you have a fast machine, you may uncomment the following line: *)

(*
newline();
kb_complete (gt_ord geom_order) [] geom_rules;
*)
